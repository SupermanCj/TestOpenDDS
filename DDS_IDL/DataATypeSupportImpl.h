/* -*- C++ -*- */
/* Generated by D:\SoftwareDevelopment\openDDS\OpenDDS-DDS\bin\opendds_idl version 3.12.2 (ACE version 6.5.0) running on input file DataA.idl */
#ifndef OPENDDS_IDL_GENERATED_DATAATYPESUPPORTIMPL_H_5PLG1L
#define OPENDDS_IDL_GENERATED_DATAATYPESUPPORTIMPL_H_5PLG1L
#include "DataAC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "DataATypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TestA */



/* Begin STRUCT: DataA */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const TestA::DataA& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const TestA::DataA& stru);

bool operator>>(Serializer& strm, TestA::DataA& stru);

size_t gen_max_marshaled_size(const TestA::DataA& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const TestA::DataA> stru, bool align);

void gen_find_size(KeyOnly<const TestA::DataA> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const TestA::DataA> stru);

bool operator>>(Serializer& strm, KeyOnly<TestA::DataA> stru);

template <>
struct MarshalTraits<TestA::DataA> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace TestA {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  DataA_OpenDDS_KeyLessThan {
  bool operator()(const TestA::DataA&, const TestA::DataA&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace TestA {
class DataATypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<TestA::DataA> {
  typedef TestA::DataA MessageType;
  typedef TestA::DataASeq MessageSequenceType;
  typedef TestA::DataATypeSupport TypeSupportType;
  typedef TestA::DataATypeSupportImpl TypeSupportTypeImpl;
  typedef TestA::DataADataWriter DataWriterType;
  typedef TestA::DataADataReader DataReaderType;
  typedef TestA::DataA_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "TestA::DataA"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace TestA {
class  DataATypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<DataATypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<DataA> TraitsType;
  typedef DataATypeSupport TypeSupportType;
  typedef DataATypeSupport::_var_type _var_type;
  typedef DataATypeSupport::_ptr_type _ptr_type;

  DataATypeSupportImpl() {}
  virtual ~DataATypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static DataATypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<TestA::DataA>();
bool gen_skip_over(Serializer& ser, TestA::DataA*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: DataA */

/* End MODULE: TestA */
#endif /* OPENDDS_IDL_GENERATED_DATAATYPESUPPORTIMPL_H_5PLG1L */
